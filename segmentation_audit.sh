# !/bin/bash
#
# +-----------------------------------------------+
# |             Segmentation_Audit.sh             |
# +-----------------------------------------------+
# |       A simple host ping and port scanner     |
# |                 tool for Linux.               |
# +-----------------------------------------------+
#
# -------------------------------------------------
# COLOUR PRESETS 
# -------------------------------------------------
GRN='\033[1;32m'
LRED='\033[1;31m'
YLW='\033[1;33m'
CYA='\033[1;36m'
LBL='\033[1;94m'
NC='\033[0m' #nocolor
#
# -------------------------------------------------
# HELP FILE / ARGUMENTS NOT FOUND: N00b ALERT
# -------------------------------------------------
#
if [[ $# -eq 0 ]] ; then
        echo -e ""
    echo -e "${YLW}WARNING: The script expects 3 arguments:${NC}"
        echo -e "----------------------------------------------"
        echo -e "     1: [File] Name of the targets file in the same directory;"
        echo -e "     2: [File] Name of the ports file in the same directory;"
        echo -e "     3: [Flag]	0 - to use 'timeout' coreutils built-in shell function (timeout required);"
        echo -e "     		1 - to use Perl Function (Perl required)."
        echo -e ""
        echo -e "Required Tools:"
        echo -e "----------------------------------------------"
        echo -e "     timeout / coreutils built-in shell function"
        echo -e "       OR"
        echo -e "     Perl"
        echo -e ""
        echo -e "Usage Example:" 
        echo -e "----------------------------------------------"
        echo -e "     ./segmentation_audit TARGETS_FILE PORTS_FILE 0${NC}" 
        echo -e ""
        echo -e ""
    exit 0
fi
#
# -------------------------------------------------
# START PROCEDURE
# -------------------------------------------------
#
echo -e "${CYA}--[ Starting Segmentation Audit Script ]--${NC}"
#
# -------------------------------------------------
# SETTING ARGUMENTS
# -------------------------------------------------
#
TARGETS_FILE=$1
PORTS_FILE=$2
TIMEOUT_FLAG=$3
DATE_FORM=`date +"%Y%m%d-%H%M"` #date in the format we want YYYY-mm-dd
GETIP=`ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'`
FILENAME="log/"$GETIP"_"$DATE_FORM"_"$TARGETS_FILE"_scan.log"
#
# -------------------------------------------------
# FIND PREREQUISITES
# -------------------------------------------------
#
# Check Targets File
echo -e "${CYA}--[ Checking Prerequisites ]--${NC}"
if [ -f "$TARGETS_FILE" ]
then
        echo "  Required 'targets' File: Found."
else
        echo "  Required 'targets' File: Not Found. Run the install.sh file. Aborting."
        exit 1
fi
#
# Check Ports File
if [ -f "$PORTS_FILE" ]
then
        echo "  Required 'ports' File: Found."
else
        echo "  Required 'ports' File: Not Found. Run the install.sh file. Aborting."
        exit 1
fi
#
# Check Timeout Flag
if [ $TIMEOUT_FLAG -eq 0 ]
then
    echo "  Using built-in timeout/coreutils shell command."
else 
        echo "  Using Perl timeout function."
        #-------------------------------------------------
        # TIMEOUT 2 
        #	Use if timeout/coreutils not installed 
        #	Requires 'perl' 
        #--------------------------------------------------
        function timeout() { 
                perl -e 'alarm shift; exec @ARGV' "$@"; 
        }
fi
#
# -------------------------------------------------
# COUNT ALL
# -------------------------------------------------
#
# Count Targets
echo -e "${LBL}Total Targets Identified${NC}"
cat $TARGETS_FILE | wc -l
#
# Count Ports
echo -e "${LBL}Total Ports to Test per host${NC}"
cat $PORTS_FILE | wc -l
#
# -------------------------------------------------
# WRITE HEADERS TO FILE
# -------------------------------------------------
#
echo -e "All results saved in: "$FILENAME
echo -e "Generated by Segmentation_Audit Script 1.1" >> $FILENAME
echo -e "Scanned "`cat $TARGETS_FILE | wc -l` >> $FILENAME
echo -e "Scan Run: "$DATE_FORM >> $FILENAME
echo -e "----------------------------------------------" >> $FILENAME
echo -e "IP\tPing\tPorts" >> $FILENAME
#
# -------------------------------------------------
# START SEGMENTATION AUDIT
# -------------------------------------------------
#
# Start Ping Scan 
echo -e "${GRN}--[ Discovering Hosts and Open Ports ]--${NC}"
#
# Copy file contents into variable
TARGETS=`cat $TARGETS_FILE`
PORTS=`cat $PORTS_FILE`
#
# Start Ping Scan
for IP in $TARGETS; do
        PINGMS=`ping -f -c4 -W1 $IP | tail -1| awk '{print $4}' | cut -d '/' -f 2`
        #
        # If Ping is NULL report BLOCKED NETWORK '[n/a]' (RED)
        # Move to next IP and report results
        if [ -z "$PINGMS" ]; then
                
                echo -e $IP "\t[n/a]\t[n/s]" >> $FILENAME
                echo -e "${LRED}"$IP "\t[n/a]\t[n/s]${NC}" 
        #
        # If Ping is successful attempt a port scan
        else
                #
                # Reset flags (new IP)
                PORTLIST=""
                PORTFLAG=0
                YELLOW=false
                GREEN=false
                #
                # For every port run netcat (returs 0 if open 1 if closed)
                for PORT in $PORTS; do
                        PORTCHECK=`timeout 1 bash -c "echo >/dev/tcp/$IP/$PORT" && echo "0" || echo "1"`
                        #PORTCHECK=`nc -z -w1 $IP $PORT; echo $?`
                        # 
                        # If PORTCHECK = 0 (open append port to list)
                        if [ $PORTCHECK -eq 0 ]; then
                                PORTLIST=$PORT","$PORTLIST
                        #
                        # Else PORTCHECK=1 (increment PORTFLAG value)
                        else
                                let "PORTFLAG=PORTFLAG+1"
                        fi
                        #
                        # If no open ports found (PORTFLAG -eq 10) report PING ONLY '[n/a]' (YELLOW)
                        if [ $PORTFLAG -eq 10 ]; then
                                PORTLIST="[n/a]]"
                                YELLOW=true
                                GREEN=false
                        else
                                GREEN=true
                                YELLOW=false
                        fi
                done
                #PORTLIST=${PORTLIST::-1}
                PORTLIST=${PORTLIST/%?}
                #
                # Report Results if YELLOW
                if $YELLOW ; then
                        echo -e $IP"\t"$PINGMS"ms \t"$PORTLIST >> $FILENAME
                        echo -e "${YLW}"$IP"\t"$PINGMS"ms \t"$PORTLIST"${NC}"
                #
                # Report Results if GREEN
                elif $GREEN ; then 
                        echo -e $IP"\t"$PINGMS"ms \t"$PORTLIST >> $FILENAME
                        echo -e "${GRN}"$IP"\t"$PINGMS"ms \t"$PORTLIST"${NC}"
                fi
        fi
done
#
# End Procedure
echo -e "${CYA}--[ Ending Segmentation Audit Script ]--${NC}"	
echo "----------------------------------------------" >> $FILENAME
# -------------------------------------------------
# ALTERNATIVES / TESTING
# -------------------------------------------------
# USE NETCAT INSTEAD OF BASH
# -------------------------------------------------
# `nc -z -w1 $IP $PORT; echo $?`
#
# -------------------------------------------------
# FUNCTIONS 
# -------------------------------------------------
# TIMEOUT 
#	Use if timeout/coreutils not installed 
#	Requires 'expect' built-in shell function / coreutils
#--------------------------------------------------
# timeout() {
#    time=$1
#    # start the command in a subshell to avoid problem with pipes
#    # (spawn accepts one command)
#    command="/bin/sh -c \"$2\""
#    expect -c "set echo \"-noecho\"; set timeout $time; spawn -noecho $command; expect timeout { exit 1 } eof { exit 0 }"    
#    if [ $? = 1 ] ; then
#        echo "Timeout after ${time} seconds"
#    fi
# }
# -------------------------------------------------
#                   [-END SCRIPT-]                 
# -------------------------------------------------
